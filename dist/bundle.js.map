{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ugf/./src/Core/Surface.ts","webpack://ugf/./src/Entities/Circle.ts","webpack://ugf/./src/Entities/Entity.ts","webpack://ugf/./src/Entities/Rectangle.ts","webpack://ugf/./src/Entities/Sprite.ts","webpack://ugf/./src/Input/InputHandler.ts","webpack://ugf/./src/Input/Key.ts","webpack://ugf/./src/Renderer/CONST.ts","webpack://ugf/./src/Renderer/Camera.ts","webpack://ugf/./src/Renderer/Pipelines/Batch/Batch.ts","webpack://ugf/./src/Renderer/Pipelines/Batch/Circle.ts","webpack://ugf/./src/Renderer/Pipelines/Batch/Rectangle.ts","webpack://ugf/./src/Renderer/Pipelines/Batch/Sprite.ts","webpack://ugf/./src/Renderer/Pipelines/Pipeline.ts","webpack://ugf/./src/Renderer/Renderer.ts","webpack://ugf/./src/Renderer/Shaders/Circle.ts","webpack://ugf/./src/Renderer/Shaders/Rectangle.ts","webpack://ugf/./src/Renderer/Shaders/Sprite.ts","webpack://ugf/./src/Renderer/Texture.ts","webpack://ugf/./src/UGF.ts","webpack://ugf/./src/Util/Classes/Math/Matrix/Mat4.ts","webpack://ugf/./src/Util/Classes/Math/Vector/Vec2.ts","webpack://ugf/./src/Util/Classes/Math/Vector/Vec3.ts","webpack://ugf/./src/Util/Classes/RGB.ts","webpack://ugf/./src/Util/Classes/Transform/Point.ts","webpack://ugf/./src/Util/Classes/Transform/Size.ts","webpack://ugf/./src/Util/Classes/Transform/Transform.ts","webpack://ugf/./src/Util/general.ts","webpack://ugf/./src/Util/math.ts","webpack://ugf/./src/Util/webgl.ts","webpack://ugf/./src/main.ts","webpack://ugf/webpack/bootstrap","webpack://ugf/webpack/before-startup","webpack://ugf/webpack/startup","webpack://ugf/webpack/after-startup"],"sourcesContent":["import Circle from \"../Entities/Circle\";\r\nimport Entity from \"../Entities/Entity\";\r\nimport Rectangle from \"../Entities/Rectangle\";\r\nimport Sprite from \"../Entities/Sprite\";\r\nimport InputHandler from \"../Input/InputHandler\";\r\nimport Key from \"../Input/Key\";\r\nimport Camera from \"../Renderer/Camera\";\r\nimport Renderer from \"../Renderer/Renderer\";\r\nimport RGB from \"../Util/Classes/RGB\";\r\nimport Size from \"../Util/Classes/Transform/Size\";\r\nimport { emptyFunc } from \"../Util/general\";\r\nimport { createCanvas } from \"../Util/webgl\";\r\n\r\nexport default class Surface {\r\n\r\n   public readonly size: Size;\r\n   public readonly canvas: HTMLCanvasElement;\r\n   public readonly background: RGB;\r\n   public entityLists: Record<EntityType, Entity[]>;\r\n\r\n   public readonly renderer: Renderer;\r\n   public readonly camera: Camera;\r\n   public readonly inputHandler: InputHandler;\r\n\r\n   public update: (dt: number) => void;\r\n   private previousTime: number;\r\n\r\n   public fps: number = 0;\r\n\r\n   // TODO: create overloads for constructor\r\n   constructor(width: number = 1200, height: number = 900, background: rgb = [50, 50, 50]) {\r\n\r\n      this.size         = new Size(width, height);\r\n      this.canvas       = createCanvas(width, height);\r\n      this.update       = emptyFunc;\r\n      this.background   = RGB.fromArr(background);\r\n\r\n      this.entityLists  = {   // TODO: create a const array to tidy up this code\r\n         rectangle:  [],\r\n         sprite:     [],\r\n         circle:     []\r\n      }\r\n\r\n      this.camera       = new Camera(0, 0, width, height);\r\n      this.renderer     = new Renderer(this);\r\n      this.inputHandler = new InputHandler(this.canvas);\r\n      this.previousTime = performance.now();\r\n\r\n      requestAnimationFrame(this.loop);\r\n   }\r\n\r\n   /**\r\n    * @description main game loop. Callback order:\r\n    *    1. update\r\n    *    2. draw\r\n    * @param currentTime number, basically performance.now() \r\n    */\r\n   private loop = (currentTime: number) => {\r\n      let timeElapsed = currentTime - this.previousTime;\r\n      this.fps = 1000 / timeElapsed;\r\n\r\n      this.update(timeElapsed *= 0.001);\r\n      this.renderer.draw();\r\n\r\n      this.previousTime = currentTime;\r\n      requestAnimationFrame(this.loop);\r\n   }\r\n\r\n   public addEntity(e: Entity) {\r\n      let entityType: EntityType = 'rectangle';\r\n      if (e instanceof Rectangle)   entityType = 'rectangle';\r\n      if (e instanceof Sprite)      entityType = 'sprite';\r\n      if (e instanceof Circle)      entityType = 'circle';\r\n\r\n      this.entityLists[entityType].push(e);\r\n   }\r\n\r\n   public addKeyInput = (\r\n      keyCode: keyCode,\r\n      onDownCallback?: () => void,\r\n      onUpCallback?: () => void\r\n      ): Key => {\r\n      return this.inputHandler.addKey(keyCode, onDownCallback, onUpCallback);\r\n   }\r\n\r\n   public createKeys = (\r\n      keyCodes: keyCode[]\r\n   ) => {\r\n      let arr: Key[] = [];\r\n\r\n      keyCodes.forEach( code => { arr.push(this.addKeyInput(code) )} )\r\n\r\n      return arr;\r\n   }\r\n\r\n   get width() { return this.size.width }\r\n   get height() { return this.size.height }\r\n   get center() { return this.size.getCenter() }\r\n}","import Surface from \"../Core/Surface\";\r\nimport RGB from \"../Util/Classes/RGB\";\r\nimport Entity from \"./Entity\";\r\n\r\nexport default class Circle extends Entity {\r\n   public color: RGB;\r\n\r\n   constructor(\r\n      surface: Surface,\r\n      x: number = 0,\r\n      y: number = 0,\r\n      radius: number = 1,\r\n      color: rgb = [1, 1, 1]\r\n   ) {\r\n      super(surface, x, y, radius, radius);\r\n      this.color = RGB.fromArr(color);\r\n\r\n      surface.addEntity(this);\r\n   }\r\n}","import Surface from \"../Core/Surface\";\r\nimport Transform from \"../Util/Classes/Transform/Transform\";\r\nimport Size from \"../Util/Classes/Transform/Size\";\r\nimport Point from \"../Util/Classes/Transform/Point\";\r\n\r\n/**\r\n * @template VertexDataLayout\r\n */\r\nexport default abstract class Entity {\r\n   \r\n   public readonly surface: Surface;\r\n\r\n   // TODO: put layer in transform\r\n   public transform: Transform;\r\n   public layer: number;\r\n\r\n   /**\r\n    * @description entity's (initial) position within its corresponding vertex array object.\r\n    */\r\n   protected VAO_INDEX: number = 0;\r\n\r\n   constructor(\r\n      surface: Surface,\r\n      x: number,\r\n      y: number,\r\n      width: number,\r\n      height: number\r\n   ) {\r\n      this.surface = surface;\r\n      this.transform = new Transform(\r\n         new Point(x, y),\r\n         new Size(width, height),\r\n         new Point(.5, .5)\r\n      );\r\n      this.layer = 0;\r\n   }\r\n\r\n   setSize (width: number, height?: number) {\r\n      this.width = width;\r\n      this.height = height ? height : width;\r\n      return this;\r\n   }\r\n\r\n   setLayer(n: number) {\r\n      this.layer = n;\r\n      return this;\r\n   }\r\n\r\n   rotate(rad: number) {\r\n      this.transform.rotation = rad;\r\n      return this;\r\n   }\r\n\r\n   scale(n: number) {\r\n      this.height *= n;\r\n      this.width *= n;\r\n      return this;\r\n   }\r\n\r\n   flip() {\r\n      this.width *= -1;\r\n      this.height *= -1;\r\n      return this;\r\n   }\r\n\r\n   flipX() {\r\n      this.width *= -1;\r\n      return this;\r\n   }\r\n   \r\n   rotateBy(rad: number) {\r\n      this.transform.rotation += rad;\r\n      return this;\r\n   }\r\n\r\n   setAnchor(x: number, y?: number) {\r\n      this.transform.anchorX = x;\r\n      this.transform.anchorY = y ? y : x;\r\n      return this;\r\n   }\r\n\r\n   get x() { return this.transform.x }\r\n   set x(n: number) { this.transform.x = n }\r\n\r\n   get y() { return this.transform.y }\r\n   set y(n: number) { this.transform.y = n }\r\n\r\n   get width() { return this.transform.width }\r\n   set width(n: number) { this.transform.width = n }\r\n\r\n   get height() { return this.transform.height }\r\n   set height(n: number) { this.transform.height = n }\r\n\r\n   // ABSTRACT METHODS\r\n   private uploadVertexData() {};\r\n   private modifyVertexData() {};\r\n}","import Surface from \"../Core/Surface\";\r\nimport RGB from \"../Util/Classes/RGB\";\r\nimport Entity from \"./Entity\";\r\n\r\nexport default class Rectangle extends Entity {\r\n   public color: RGB;\r\n\r\n   constructor(\r\n      surface: Surface,\r\n      x: number = 0,\r\n      y: number = 0,\r\n      width: number = 2 ** 4,\r\n      height: number = 2 ** 4,\r\n      color: rgb = [1, 1, 1]\r\n   ) {\r\n      super(surface, x, y, width, height);\r\n      this.color = RGB.fromArr(color);\r\n\r\n      surface.addEntity(this);\r\n   }\r\n}","import Texture from \"../Renderer/Texture\";\r\nimport Surface from \"../Core/Surface\";\r\nimport { randInt } from \"../Util/math\";\r\nimport Entity from \"./Entity\";\r\n\r\nexport default class Sprite extends Entity {\r\n\r\n   public readonly texture: Texture;\r\n   public frame: number;\r\n\r\n   constructor(surface: Surface, x: number, y: number, texture: Texture, frame: number = 0) { \r\n      super(surface, x, y, texture.img.width, texture.img.height);\r\n\r\n      this.texture   = texture;\r\n      this.frame     = this.frameExists(frame) ? frame : 0;\r\n\r\n      surface.addEntity(this);\r\n   }\r\n\r\n   public nextFrame() {\r\n      if (this.frameExists(this.frame + 1)) {\r\n         this.frame++\r\n      } else {\r\n         this.frame = 0;\r\n      }\r\n   }\r\n\r\n   public setFrame(n: number) {\r\n      if (this.frameExists(n)) {\r\n         this.frame = n;\r\n      } else {\r\n         console.warn(`this texture does not have frame ${n}`);\r\n      }\r\n   }\r\n\r\n   public randomFrame () {\r\n      let original = this.frame;\r\n      while (original == this.frame) {\r\n         this.frame = randInt(0, this.texture.frameData.length - 1);\r\n      }\r\n   }\r\n\r\n   private frameExists(frame: number) {\r\n      if (frame < 0 || frame > this.texture.frameData.length - 1) return false;\r\n      return true;\r\n   }\r\n}","import Key from \"./Key\";\r\n\r\nexport default class InputHandler {\r\n\r\n   public readonly canvas: HTMLCanvasElement;\r\n\r\n   private keyResgistry: Dictionary < keyCode, Key > = {};\r\n   \r\n   constructor(canvas: HTMLCanvasElement) {\r\n      this.canvas = canvas;\r\n      this.canvas.tabIndex = 0;\r\n      this.canvas.focus();\r\n\r\n      this.canvas.addEventListener('keydown', \r\n         (e: KeyboardEvent) => { this.keyBoardEventCallback( <keyCode> e.key, 'keydown') }\r\n      );\r\n\r\n      this.canvas.addEventListener('keyup', \r\n         (e: KeyboardEvent) => { this.keyBoardEventCallback( <keyCode> e.key, 'keyup') }\r\n      );\r\n   }\r\n\r\n   public addKey(\r\n      keyCode: keyCode,\r\n      onDownCallback?: () => void,\r\n      onUpCallback?: () => void\r\n   ): Key {\r\n      let key = new Key(keyCode, onDownCallback, onUpCallback);\r\n      this.keyResgistry[key.code] = key;\r\n      return key;\r\n   }\r\n\r\n   private keyBoardEventCallback(keyCode: keyCode, event: keyEvent) {\r\n      let key = this.keyResgistry[keyCode];\r\n\r\n      if (!key) return;\r\n\r\n      switch (event) {\r\n         case 'keydown':\r\n            key.onDown();\r\n            break;\r\n\r\n         case 'keyup':\r\n            key.onUp();\r\n            break;\r\n      }\r\n   }\r\n}","import { emptyFunc } from \"../Util/general\";\r\n\r\nexport default class Key {\r\n   public readonly code: keyCode;\r\n   public pressed: boolean;\r\n\r\n   public onDownCallback: () => void;\r\n   public onUpCallback: () => void;\r\n   public onDownOnceCallback: () => void;\r\n\r\n   constructor(\r\n      code: keyCode,\r\n      onDownCallback: () => void = emptyFunc,\r\n      onUpCallback: () => void = emptyFunc\r\n   ) {\r\n      this.code = code;\r\n      this.onDownCallback = onDownCallback;\r\n      this.onUpCallback = onUpCallback;\r\n      this.onDownOnceCallback = emptyFunc;\r\n      this.pressed = false;\r\n   }\r\n\r\n   public onDown() {\r\n      if (!this.pressed) this.onDownOnce();\r\n      this.onDownCallback();\r\n   }\r\n\r\n   public reset() {\r\n      this.onDownCallback = emptyFunc;\r\n      this.onUpCallback = emptyFunc;\r\n      this.onDownOnceCallback = emptyFunc;\r\n   }\r\n\r\n   public onUp() {\r\n      this.pressed = false;\r\n      this.onUpCallback();\r\n   }\r\n\r\n   private onDownOnce() {\r\n      this.pressed = true;\r\n      this.onDownOnceCallback();\r\n   }\r\n}","\r\n\r\n// TODO: determine values at startup (boot phase)\r\nexport const MAX_SPRITES        = 2**14;\r\nexport const MAX_TEXTURE_UNITS  = 16;\r\nexport const MAX_RECTANGLES     = 2**14;\r\nexport const MAX_CIRCLES        = 2**14;\r\n\r\nexport const FLOAT_SIZE         = 4; // # of bytes per float = sizeof(float);\r\nexport const INT_SIZE           = 4; // # of bytes per int = sizeof(float);\r\n\r\n// FOR QUADS\r\nexport const VERTEX_PER_QUAD   = 4;\r\nexport const INDICES_PER_QUAD  = 6;\r\n\r\n// FOR LINES\r\nexport const VERTEX_PER_LINE   = 2;0\r\nexport const INDICES_PER_LINE  = 2;","import Mat4 from \"../Util/Classes/Math/Matrix/Mat4\";\r\nimport Point from \"../Util/Classes/Transform/Point\";\r\nimport Size from \"../Util/Classes/Transform/Size\";\r\n\r\nenum indexes {\r\n   x  = 12,\r\n   y  = 13,\r\n   sx = 0,\r\n   sy = 5,\r\n}\r\n\r\n/**\r\n * @description basically a glorified Mat4 wrapper for translation * scale matrix \r\n * @note there is some fuckery going in in this class. Maybe my shaders are set up wrong but the 'standar' way to set up a camera tranformation does not work\r\n */\r\nexport default class Camera {\r\n   \r\n   private _mat: Mat4;\r\n   private offset: Point;\r\n   public focus: Point;\r\n   public resolution: Size;\r\n   public zoomRange: [x: number, y: number] = [0.5, 2];\r\n\r\n   constructor(\r\n      fx: number,\r\n      fy: number,\r\n      rx: number,\r\n      ry: number,\r\n      x: number = 0,\r\n      y: number = 0,\r\n      zoom: number = 1\r\n   ) {\r\n      this._mat = Mat4.Identity();\r\n      this.focus = new Point(fx, fy);\r\n      this.offset = new Point(fx, fy);\r\n      this.resolution = new Size(rx, ry);\r\n      \r\n      this.reset();\r\n   }\r\n\r\n   public moveTo(x: number, y: number) {\r\n      this._mat[indexes.x] = x;\r\n      this._mat[indexes.y] = y;\r\n      // this.focus.x = -x + this.offset.x;\r\n      // this.focus.y = -y + this.offset.y;\r\n   }\r\n\r\n   public moveBy(x: number, y: number) {\r\n      this.moveTo(\r\n         this._mat[indexes.x] + x,\r\n         this._mat[indexes.y] + y\r\n      );\r\n   }\r\n   \r\n   public scaleTo(n: number) {\r\n      this._mat[indexes.sx] = n;\r\n      this._mat[indexes.sy] = n;\r\n   }\r\n\r\n   public scale(n: number) {\r\n      let newZoom = new Point(\r\n         this._mat[indexes.sx] + n,\r\n         this._mat[indexes.sy] + n\r\n      );\r\n\r\n      newZoom.x = (newZoom.x < this.zoomRange[0]) ? this.zoomRange[0] : newZoom.x;\r\n      newZoom.x = (newZoom.x > this.zoomRange[1]) ? this.zoomRange[1] : newZoom.x;\r\n      newZoom.y = (newZoom.y < this.zoomRange[0]) ? this.zoomRange[0] : newZoom.y;\r\n      newZoom.y = (newZoom.y > this.zoomRange[1]) ? this.zoomRange[1] : newZoom.y;\r\n\r\n      this._mat[indexes.sx] = newZoom.x;\r\n      this._mat[indexes.sy] = newZoom.y;\r\n\r\n      // this._mat[indexes.x] = -newZoom.x * (this.focus.x) + ( this.resolution.x / 2 );\r\n      // this._mat[indexes.y] = -newZoom.y * (this.focus.y) + ( this.resolution.y / 2 );\r\n\r\n   }\r\n\r\n   public reset(\r\n      x: number = 0,\r\n      y: number = 0,\r\n      zoom: number = 1\r\n   ) {\r\n      this.moveTo(x, y);\r\n      this.scaleTo(zoom);\r\n   }\r\n\r\n   public get zoom() {\r\n      return new Point(this._mat[indexes.sx], this._mat[indexes.sy]); \r\n   }\r\n\r\n   public get x() {\r\n      return this._mat[indexes.x];\r\n   }\r\n\r\n   public get y() {\r\n      return this._mat[indexes.y];\r\n   }\r\n   \r\n   public get mat(): Mat4 {\r\n      return this._mat;\r\n   }\r\n\r\n   public getMat(): Mat4 {\r\n      return this._mat;\r\n   }\r\n}","import Entity from \"../../../Entities/Entity\";\r\nimport Renderer from \"../../Renderer\";\r\nimport Pipeline from \"../Pipeline\";\r\n\r\n/**\r\n * @member UNIT_SIZE          Size in bytes of single value -> for floats ⇒ sizeof(float) = 4 ⇒ 4 bytes\r\n * @member MAX_ELEMS          Max amount of pipeline target entity in single draw call\r\n * @member VERTEX_PER_ELEM    Amount of vertices in an element -> for quad ⇒ has 4 corners ⇒ 4 vetices\r\n * @member UNITS_PER_VERTEX   Amount of values per single vertex -> for vertex with 3 values ⇒ [ x, y, z ].length = 3 ⇒ 3 units (values)\r\n * @member INDICES_PER_ELEM   Indeces required to build one element -> for quad ⇒ made up of 2 triangles, a triangle has 3 poitns ⇒ 2 * 3 = 6\r\n * @member VERTEX_SIZE        Size in bytes of all values in vertex -> for 3 component vertex ⇒ 3 * sizeof(float) = 4 ⇒ 12 bytes\r\n * @member UNITS_PER_ELEM     Amount of values in an element -> for quad with 2 component vertices ⇒ 4 vertices * 2 units = 8 units (values)\r\n * @member MAX_INDICES        Max amount of indices to describe vao\r\n * @member MAX_UNITS          Max capacity for vao storage\r\n * @member MAX_SIZE           Max bytes inside vao\r\n */\r\nexport default abstract class BatchPipeline <\r\n   E extends Entity,\r\n   attributes extends string = string,\r\n   uniforms extends string = string\r\n>  extends Pipeline <E, attributes, uniforms> {\r\n   \r\n   public readonly UNIT_SIZE: number;\r\n   public readonly MAX_ELEMS: number;\r\n   public readonly VERTEX_PER_ELEM: number;\r\n   public readonly UNITS_PER_VERTEX: number;\r\n   public readonly INDICES_PER_ELEM: number;\r\n\r\n   public readonly VERTEX_SIZE: number;\r\n   public readonly UNITS_PER_ELEM: number;\r\n   public readonly MAX_INDICES: number;\r\n   public readonly MAX_UNITS: number;\r\n   public readonly MAX_SIZE: number;\r\n\r\n   protected vao: Float32Array;  // Vertex Array Object  -> CPU side vertex (draw) buffer\r\n   protected vbo: WebGLBuffer;   // Vertex Buffer Object -> GPU side vertex buffer\r\n   protected iao: Uint16Array;   // Index Array Buffer   -> CPU side index buffer\r\n   protected ibo: WebGLBuffer;   // Index Buffer Object  -> GPU side index buffer\r\n\r\n   protected nextElemOffset: number = 0;\r\n   protected elemsToDraw: number = 0;\r\n\r\n   // DEBUGING & PERFORMANCE/STATS\r\n   public lastDrawCalls: number = 0;\r\n\r\n   public constructor(\r\n      renderer: Renderer, \r\n      entityList: E[],\r\n      vsSource: string, \r\n      fsSource: string, \r\n      attributeList: readonly attributes[], \r\n      uniformList: readonly uniforms[],\r\n\r\n      UNIT_SIZE: number,\r\n      MAX_ELEMS: number,\r\n      UNITS_PER_VERTEX: number,\r\n      VERTEX_PER_ELEM: number,\r\n      INDICES_PER_ELEM: number,\r\n      ) {\r\n      super(renderer, entityList, vsSource, fsSource, attributeList, uniformList);\r\n\r\n      // SETTING UP PIPELINE CONSTANTS\r\n      this.UNIT_SIZE          = UNIT_SIZE;\r\n      this.MAX_ELEMS          = MAX_ELEMS;\r\n      this.UNITS_PER_VERTEX   = UNITS_PER_VERTEX;\r\n      this.VERTEX_PER_ELEM    = VERTEX_PER_ELEM;\r\n      this.INDICES_PER_ELEM   = INDICES_PER_ELEM;\r\n\r\n      this.VERTEX_SIZE        = this.UNITS_PER_VERTEX * this.UNIT_SIZE;\r\n      this.UNITS_PER_ELEM     = this.UNITS_PER_VERTEX * this.VERTEX_PER_ELEM;\r\n      this.MAX_INDICES        = this.INDICES_PER_ELEM * this.MAX_ELEMS;\r\n      this.MAX_UNITS          = this.UNITS_PER_ELEM   * this.MAX_ELEMS;\r\n      this.MAX_SIZE           = this.MAX_UNITS        * this.UNIT_SIZE;\r\n\r\n      let gl = this.renderer.gl;\r\n      gl.useProgram(this.program);\r\n\r\n      this.vao = new Float32Array(this.MAX_UNITS);\r\n      this.vbo = <WebGLBuffer> gl.createBuffer();\r\n      this.iao = new Uint16Array(this.MAX_INDICES);\r\n      this.ibo = <WebGLBuffer> gl.createBuffer();\r\n   }\r\n\r\n   // TODO\r\n   /**\r\n    * \r\n    * @returns next available position in VAO\r\n    */\r\n   public getVAOIndex(): number {\r\n      return 0;\r\n   }\r\n\r\n   protected setAttribute(a: attributes) {\r\n      let gl = this.renderer.gl;\r\n      let { location, unitType, units, offset } = this.attributes[a];\r\n\r\n      gl.useProgram(this.program);  // TODO: remove\r\n\r\n      gl.enableVertexAttribArray(location);\r\n      gl.vertexAttribPointer(location, units, unitType, false, this.VERTEX_SIZE, offset);\r\n   }\r\n\r\n   protected setAllAttributes() {\r\n      for (const attrib in this.attributes) this.setAttribute(attrib);\r\n   }\r\n\r\n   protected setAttributes(a?: attributes[]) {\r\n      if (a) { // Only set a selected amount of attributes\r\n         for (const key of a) {\r\n            this.setAttribute(key);\r\n         }\r\n      } else { // Set all\r\n         this.setAllAttributes();\r\n      }\r\n   }\r\n\r\n   public begin(): void {\r\n      this.elemsToDraw = this.entityList.length;\r\n\r\n      if (!this.elemsToDraw) return;\r\n\r\n      let gl = this.renderer.gl;\r\n      gl.useProgram(this.program);\r\n\r\n      this.setPerDrawUniforms();\r\n      \r\n      this.lastDrawCalls = 0;\r\n      this.nextElemOffset = 0;\r\n\r\n      this.flush();\r\n   };\r\n\r\n   protected flush(): void {\r\n      let gl = this.renderer.gl;\r\n      let toDrawElementCount: number;\r\n      let entities = this.entityList;\r\n      let offset = this.nextElemOffset;\r\n\r\n      if (this.elemsToDraw > this.MAX_ELEMS) {\r\n         toDrawElementCount = this.MAX_ELEMS;\r\n      } else {\r\n         toDrawElementCount = this.elemsToDraw;\r\n      }\r\n      \r\n      for (let i = 0; i < toDrawElementCount; i++) {\r\n         const e = entities[i + offset];\r\n         this.vao.set(this.createQuadData(e), i * this.UNITS_PER_ELEM);\r\n      };\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n      this.setAllAttributes();\r\n      gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vao);\r\n\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo);\r\n      gl.drawElements(\r\n         gl.TRIANGLES,\r\n         this.INDICES_PER_ELEM * toDrawElementCount, \r\n         gl.UNSIGNED_SHORT,\r\n         0\r\n      );\r\n\r\n      this.elemsToDraw -= toDrawElementCount;\r\n      this.lastDrawCalls++;\r\n      if (this.elemsToDraw) this.flush();\r\n   };\r\n   protected abstract createQuadData(r: Entity): number[];\r\n\r\n   /**\r\n    * can only be called within begin method or itself recursively\r\n    */\r\n   protected abstract setPerDrawUniforms(): void;\r\n}","import BatchPipeline from \"./Batch\";\r\nimport Renderer from \"../../Renderer\";\r\nimport Circle from \"../../../Entities/Circle\";\r\nimport { FLOAT_SIZE, VERTEX_PER_QUAD, INDICES_PER_QUAD, MAX_RECTANGLES } from \"../../CONST\";\r\n\r\n\r\nimport {\r\n   vertexShader   as vsSource,\r\n   fragmentShader as fsSource,\r\n   attributes     as A, \r\n   uniforms       as U,\r\n   attributeList,\r\n   uniformList\r\n} from \"../../Shaders/Circle\";\r\nimport { createQuadIAO } from \"../../../Util/webgl\";\r\n\r\n\r\n// TODO: dynamically change max size\r\nexport default class CirclePipeline extends BatchPipeline <Circle, A, U> {\r\n\r\n   public constructor(renderer: Renderer) {\r\n      super(\r\n         renderer,\r\n         <Circle[]>renderer.entityLists.circle,\r\n         vsSource, \r\n         fsSource, \r\n         attributeList, \r\n         uniformList,\r\n         FLOAT_SIZE,\r\n         MAX_RECTANGLES,\r\n         11,          // [ x, y, z, offsetx, offsety, originx, originy, angle, r, g, b].length = 11\r\n         VERTEX_PER_QUAD,\r\n         INDICES_PER_QUAD\r\n      );\r\n\r\n      let gl = this.renderer.gl;\r\n      let surface = this.renderer.surface;\r\n      gl.useProgram(this.program);\r\n      \r\n      /* SETTING UP UNIFORMS */\r\n      let u_projection  = this.uniforms.u_projection;\r\n      let u_resolution  = this.uniforms.u_resolution;\r\n      let u_camera      = this.uniforms.u_camera;\r\n      gl.uniformMatrix4fv(u_projection.location, false, renderer.projectionMat);\r\n      gl.uniform2f(u_resolution.location, surface.width, surface.height);\r\n      gl.uniformMatrix4fv(u_camera.location, false, renderer.cameraMat);\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n      this.setAllAttributes();\r\n      gl.bufferData(gl.ARRAY_BUFFER, this.MAX_SIZE, gl.DYNAMIC_DRAW);\r\n      \r\n      /* SETTING UP INDEX BUFFER/ARRAY OBJECT */\r\n      this.iao.set(createQuadIAO(this.MAX_ELEMS));\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo);\r\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.iao, gl.STATIC_DRAW);\r\n   }\r\n\r\n   protected createQuadData(circle: Circle) {\r\n      let transform = circle.transform;\r\n      let [ x, y ] = transform.position.getValues();\r\n      let [ ofx, ofy ] = transform.offset.getValues();\r\n      let [ orx, ory ] = transform.origin.getValues();\r\n      let a = transform.rotation;\r\n      let [ width, height ] = [ transform.width, transform.height ];\r\n      let z = circle.layer;\r\n      let [ r, g, b ] = circle.color.getNormalized();\r\n\r\n      return [\r\n         x        , y         , z, ofx, ofy, orx, ory, a, r, g, b,  // ↖ VERTEX\r\n         x + width, y         , z, ofx, ofy, orx, ory, a, r, g, b,  // ↗ VERTEX\r\n         x        , y + height, z, ofx, ofy, orx, ory, a, r, g, b,  // ↙ VERTEX\r\n         x + width, y + height, z, ofx, ofy, orx, ory, a, r, g, b   // ↘ Vertex\r\n      ]\r\n   }\r\n\r\n   protected setPerDrawUniforms(): void {\r\n      let gl = this.renderer.gl;\r\n      gl.uniformMatrix4fv(this.uniforms.u_camera.location, false, this.renderer.cameraMat);\r\n   }\r\n}","import BatchPipeline from \"./Batch\";\r\nimport Renderer from \"../../Renderer\";\r\nimport Rectangle from \"../../../Entities/Rectangle\";\r\nimport { FLOAT_SIZE, VERTEX_PER_QUAD, INDICES_PER_QUAD, MAX_RECTANGLES } from \"../../CONST\";\r\n\r\n\r\nimport {\r\n   vertexShader   as vsSource,\r\n   fragmentShader as fsSource,\r\n   attributes     as A, \r\n   uniforms       as U,\r\n   attributeList,\r\n   uniformList\r\n} from \"../../Shaders/Rectangle\";\r\nimport { createQuadIAO } from \"../../../Util/webgl\";\r\n\r\n\r\n// TODO: dynamically change max size\r\nexport default class RectanglePipeline extends BatchPipeline <Rectangle, A, U> {\r\n\r\n   public constructor(renderer: Renderer) {\r\n      super(\r\n         renderer,\r\n         <Rectangle[]>renderer.entityLists.rectangle,\r\n         vsSource, \r\n         fsSource, \r\n         attributeList, \r\n         uniformList,\r\n         FLOAT_SIZE,\r\n         MAX_RECTANGLES,\r\n         11,          // [ x, y, z, offsetx, offsety, originx, originy, angle, r, g, b].length = 11\r\n         VERTEX_PER_QUAD,\r\n         INDICES_PER_QUAD\r\n      );\r\n\r\n      let gl = this.renderer.gl;\r\n      gl.useProgram(this.program);\r\n      \r\n      /* SETTING UP UNIFORMS */\r\n      let u_projection  = this.uniforms.u_projection;\r\n      let u_camera      = this.uniforms.u_camera;\r\n      gl.uniformMatrix4fv(u_projection.location, false, renderer.projectionMat);\r\n      gl.uniformMatrix4fv(u_camera.location, false, renderer.cameraMat);\r\n\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n      this.setAllAttributes();\r\n      gl.bufferData(gl.ARRAY_BUFFER, this.MAX_SIZE, gl.DYNAMIC_DRAW);\r\n      \r\n      /* SETTING UP INDEX BUFFER/ARRAY OBJECT */\r\n      this.iao.set(createQuadIAO(this.MAX_ELEMS));\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo);\r\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.iao, gl.STATIC_DRAW);\r\n   }\r\n\r\n   protected createQuadData(rect: Rectangle) {\r\n      let transform = rect.transform;\r\n      let [ x, y ] = transform.position.getValues();\r\n      let [ ofx, ofy ] = transform.offset.getValues();\r\n      let [ orx, ory ] = transform.origin.getValues();\r\n      let a = transform.rotation;\r\n      let [ width, height ] = [ transform.width, transform.height ];\r\n      let z = rect.layer;\r\n      let [ r, g, b ] = rect.color.getNormalized();\r\n\r\n      return [\r\n         x        , y         , z, ofx, ofy, orx, ory, a, r, g, b,  // ↖ VERTEX\r\n         x + width, y         , z, ofx, ofy, orx, ory, a, r, g, b,  // ↗ VERTEX\r\n         x        , y + height, z, ofx, ofy, orx, ory, a, r, g, b,  // ↙ VERTEX\r\n         x + width, y + height, z, ofx, ofy, orx, ory, a, r, g, b   // ↘ Vertex\r\n      ]\r\n   }\r\n\r\n   protected setPerDrawUniforms(): void {\r\n      let gl = this.renderer.gl;\r\n      gl.uniformMatrix4fv(this.uniforms.u_camera.location, false, this.renderer.cameraMat);\r\n   }\r\n}","import BatchPipeline from \"./Batch\";\r\nimport Renderer from \"../../Renderer\";\r\nimport Sprite from \"../../../Entities/Sprite\";\r\n\r\nimport {\r\n   FLOAT_SIZE,\r\n   INDICES_PER_QUAD,\r\n   MAX_SPRITES,\r\n   MAX_TEXTURE_UNITS,\r\n   VERTEX_PER_QUAD\r\n} from '../../CONST';\r\n\r\nimport {\r\n   vertexShader   as vsSource,\r\n   fragmentShader as fsSource,\r\n   attributes     as A,\r\n   uniforms       as U,\r\n   attributeList,\r\n   uniformList\r\n} from '../../Shaders/Sprite';\r\nimport { createQuadIAO } from \"../../../Util/webgl\";\r\n\r\nexport default class SpritePipeline extends BatchPipeline <Sprite, A, U> {\r\n\r\n   public MAX_TEXTURE_UNITS: number = MAX_TEXTURE_UNITS;\r\n\r\n   public constructor(renderer: Renderer) {\r\n      super(\r\n         renderer, \r\n         <Sprite[]>renderer.entityLists.sprite,\r\n         vsSource, \r\n         fsSource, \r\n         attributeList, \r\n         uniformList,\r\n         FLOAT_SIZE,\r\n         MAX_SPRITES,\r\n         11, // [ x, y, z, offsetx, offsety, originx, originy, angle, textureindex, texcoordx, texcordy]\r\n         VERTEX_PER_QUAD,\r\n         INDICES_PER_QUAD\r\n      );\r\n\r\n      let gl = this.renderer.gl;\r\n      gl.useProgram(this.program);\r\n\r\n      /* SETTING UP UNIFORMS */\r\n      let u_projection  = this.uniforms.u_projection;\r\n      let u_textures    = this.uniforms.u_textures;\r\n      let u_camera      = this.uniforms.u_camera;\r\n      gl.uniformMatrix4fv(u_projection.location, false, renderer.projectionMat);\r\n      gl.uniformMatrix4fv(u_camera.location, false, this.renderer.cameraMat);\r\n      \r\n      let texUnitArr: number[] = [];\r\n      for (let i = 0; i < this.MAX_TEXTURE_UNITS; i++) texUnitArr.push(i);\r\n      gl.uniform1iv(u_textures.location, new Int32Array(texUnitArr));\r\n\r\n      /* SETTING UP ATTRIBUTES */\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\r\n      this.setAllAttributes();\r\n      gl.bufferData(gl.ARRAY_BUFFER, this.MAX_SIZE, gl.DYNAMIC_DRAW);\r\n\r\n      /* SETTING UP INDEX BUFFER/ARRAY OBJECT */\r\n      this.iao.set(createQuadIAO(this.MAX_ELEMS));\r\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.ibo);\r\n      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.iao, gl.STATIC_DRAW);\r\n   }\r\n\r\n   protected createQuadData(sprite: Sprite) {\r\n      let transform = sprite.transform;\r\n\r\n      let [ x, y ] = transform.position.getValues();\r\n      let z = sprite.layer;\r\n      let [ ofx, ofy ] = transform.offset.getValues();\r\n      let [ orx, ory ] = transform.origin.getValues();\r\n      let a = transform.rotation;\r\n      let [ width, height ] = transform.size.getValues();\r\n      let texture = sprite.texture;\r\n      let frame = sprite.frame;\r\n\r\n      let [ unit, tx1, ty1, tx2, ty2 ] = [\r\n         texture.unit,\r\n         texture.frameData[frame][0],\r\n         texture.frameData[frame][1],\r\n         texture.frameData[frame][2],\r\n         texture.frameData[frame][3]\r\n      ]\r\n\r\n      let quad = [\r\n         x           , y         , z, ofx, ofy, orx, ory, a, unit, tx1, ty1,  // v1\r\n         x + width   , y         , z, ofx, ofy, orx, ory, a, unit, tx2, ty1,  // v2\r\n         x           , y + height, z, ofx, ofy, orx, ory, a, unit, tx1, ty2,  // v3\r\n         x + width   , y + height, z, ofx, ofy, orx, ory, a, unit, tx2, ty2   // v4\r\n      ]\r\n      \r\n      return quad;\r\n   }\r\n\r\n   protected setPerDrawUniforms(): void {\r\n      let gl = this.renderer.gl;\r\n      gl.uniformMatrix4fv(this.uniforms.u_camera.location, false, this.renderer.cameraMat);\r\n   }\r\n}","import Renderer from \"../Renderer\";\r\nimport Entity from \"../../Entities/Entity\";\r\nimport { createProgram, createShader, getDataFromType } from \"../../Util/webgl\";\r\nimport { emptyRecord } from \"../../Util/general\";\r\n\r\n/** this sis afucking mess */\r\nexport default abstract class Pipeline<\r\n   E extends Entity = Entity,\r\n   attributes extends string = string,\r\n   uniforms extends string = string\r\n> {\r\n   public readonly renderer: Renderer;\r\n\r\n   public readonly program: WebGLProgram;\r\n   public readonly vertexShader: WebGLShader;\r\n   public readonly fragmentShader: WebGLShader;\r\n\r\n   // Reference to drawable object list\r\n   protected entityList: E[];\r\n\r\n   protected attributes = emptyRecord<attributes, attributeInfo>();\r\n   protected uniforms = emptyRecord<uniforms, uniformInfo>();\r\n\r\n   public constructor(\r\n      renderer: Renderer,\r\n      entityList: E[],\r\n      vsSource: string,\r\n      fsSource: string,\r\n      attributeList: readonly attributes[],\r\n      uniformList: readonly uniforms[]\r\n   ) {\r\n      let gl = renderer.gl;\r\n      this.renderer = renderer;\r\n      this.entityList = entityList;\r\n      this.vertexShader = createShader(gl, 'vertex', vsSource);\r\n      this.fragmentShader = createShader(gl, 'fragment', fsSource);\r\n      this.program = createProgram(gl, this.vertexShader, this.fragmentShader);\r\n\r\n      this.generateAttributes(attributeList);\r\n      this.generateUniforms(uniformList);\r\n   }\r\n\r\n   private generateAttributes(list: readonly string[]) {\r\n      let gl = this.renderer.gl;\r\n      let position = 0;\r\n      for (const attrib of list) {\r\n         let location = gl.getAttribLocation(this.program, attrib);\r\n         let info = <WebGLActiveInfo>gl.getActiveAttrib(this.program, location);\r\n         let type = info.type;\r\n\r\n         let [unitType, units, size] = getDataFromType(type);\r\n         let offset = position;\r\n         position += size;\r\n\r\n         this.attributes[attrib as attributes] = {\r\n            id: attrib,\r\n            location: location,\r\n            type: type,\r\n            unitType: unitType,\r\n            units: units,\r\n            size: size,\r\n            offset: offset\r\n         };\r\n      }\r\n   }\r\n\r\n   private generateUniforms(list: readonly string[]) {\r\n      let gl = this.renderer.gl;\r\n      for (const [index, uniformID] of list.entries()) {\r\n         let location = <WebGLUniformLocation>(\r\n            gl.getUniformLocation(this.program, uniformID)\r\n         );\r\n         let info = <WebGLActiveInfo>gl.getActiveUniform(this.program, index);\r\n         let size = info.size;\r\n         let type = info.type;\r\n\r\n         this.uniforms[uniformID as uniforms] = {\r\n            location: location,\r\n            size: size,\r\n            type: type\r\n         };\r\n      }\r\n   }\r\n\r\n   public abstract begin(): void;\r\n}","import Surface from \"../Core/Surface\";\r\nimport Pipeline from \"./Pipelines/Pipeline\";\r\nimport SpritePipeline from \"./Pipelines/Batch/Sprite\";\r\nimport RectanglePipeline from \"./Pipelines/Batch/Rectangle\";\r\nimport Entity from \"../Entities/Entity\";\r\nimport { createContext, createOrthoMatrix } from \"../Util/webgl\";\r\nimport Texture from \"./Texture\";\r\nimport Camera from \"./Camera\";\r\nimport CirclePipeline from \"./Pipelines/Batch/Circle\";\r\n\r\nexport default class Renderer {\r\n\r\n   public readonly surface: Surface;\r\n   private readonly camera: Camera;\r\n   public readonly gl: WebGLRenderingContext;\r\n\r\n   public pipelines: Record<EntityType, Pipeline>;\r\n   public entityLists: Record<EntityType, Entity[]>;\r\n   \r\n   public projectionMat: number[];\r\n   public cameraMat: number[];\r\n\r\n   constructor(surface: Surface) {\r\n      this.surface         = surface;\r\n      this.camera          = surface.camera;\r\n      this.gl              = createContext(surface.canvas);\r\n      this.projectionMat   = createOrthoMatrix(surface.width, surface.height);\r\n      this.cameraMat       = this.camera.mat;\r\n      this.entityLists     = surface.entityLists;\r\n      \r\n      // Initilizing other systems\r\n      Texture.init(this.gl);\r\n      this.pipelines       = {\r\n         sprite:     new SpritePipeline(this),\r\n         rectangle:  new RectanglePipeline(this),\r\n         circle:     new CirclePipeline(this)\r\n      };\r\n      \r\n      // Setting up surface for drawing\r\n      let gl         = this.gl;\r\n      let [r, g, b]  = surface.background.getNormalized();\r\n\r\n      gl.enable(gl.BLEND);\r\n      gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n\r\n      gl.clearColor(r, g, b, 1);\r\n      gl.viewport(0, 0, surface.width, surface.height);\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n   }\r\n\r\n   public draw(): void {\r\n      let gl   = this.gl;\r\n      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n      \r\n      for (const type in this.pipelines) {\r\n         this.pipelines[type as EntityType].begin();\r\n      }\r\n   }\r\n}","export const attributeList = ['a_position', 'a_offset', 'a_origin', 'a_angle', 'a_color'] as const;\r\nexport const uniformList = ['u_projection', 'u_resolution', 'u_camera'] as const;\r\n\r\nconst position = attributeList[0];\r\nconst offset = attributeList[1];\r\nconst origin = attributeList[2];\r\nconst angle = attributeList[3];\r\nconst color = attributeList[4];\r\n\r\nconst projection = uniformList[0];\r\nconst resolution = uniformList[1];\r\nconst camera = uniformList[2];\r\n\r\nexport type attributes = typeof attributeList[number];\r\nexport type uniforms = typeof uniformList[number];\r\n\r\nexport const vertexShader = `\r\n   precision mediump float;\r\n\r\n   attribute vec3 ${position};\r\n   attribute vec2 ${offset};\r\n   attribute vec2 ${origin};\r\n   attribute float ${angle};\r\n   attribute vec3 ${color};\r\n\r\n   uniform mat4 ${projection};\r\n   uniform vec2 ${resolution};\r\n   uniform mat4 ${camera};\r\n\r\n   varying vec3 v_color;\r\n   varying vec2 v_resolution;\r\n   \r\n   void main()\r\n   {\r\n      float c = cos(${angle});\r\n      float s = sin(${angle});\r\n\r\n      // I tried using matrix transformations but it didn't work\r\n      vec3 p = ${position};\r\n\r\n      // Translate to origin\r\n      p.x -= ${origin}.x;\r\n      p.y -= ${origin}.y;\r\n\r\n      // Rotate\r\n      float xnew = p.x * c - p.y * s;\r\n      float ynew = p.x * s + p.y * c;\r\n\r\n      // Tranlate back\r\n      p.x = xnew + ${origin}.x;\r\n      p.y = ynew + ${origin}.y;\r\n\r\n      p -= vec3(${offset} , 0);\r\n      \r\n      gl_Position = (${projection} * ${camera}) * vec4(p , 1);\r\n\r\n      v_color = ${color};\r\n      v_resolution = ${resolution};\r\n   }\r\n` as const;\r\n\r\nexport const fragmentShader = `\r\n   precision mediump float;\r\n\r\n   varying vec3 v_color;\r\n   varying vec2 v_resolution;\r\n\r\n   void main()\r\n   {\r\n      vec2 uv = gl_FragCoord.xy/v_resolution;\r\n      float distance = length(uv);\r\n      gl_FragColor.rg = vec2(distance);\r\n   }\r\n` as const;","export const attributeList = ['a_position', 'a_offset', 'a_origin', 'a_angle', 'a_color'] as const;\r\nexport const uniformList = ['u_projection', 'u_camera'] as const;\r\n\r\nconst position = attributeList[0];\r\nconst offset = attributeList[1];\r\nconst origin = attributeList[2];\r\nconst angle = attributeList[3];\r\nconst color = attributeList[4];\r\n\r\nconst projection = uniformList[0];\r\nconst camera = uniformList[1];\r\n\r\nexport type attributes = typeof attributeList[number];\r\nexport type uniforms = typeof uniformList[number];\r\n\r\nexport const vertexShader = `\r\n   precision mediump float;\r\n\r\n   attribute vec3 ${position};\r\n   attribute vec2 ${offset};\r\n   attribute vec2 ${origin};\r\n   attribute float ${angle};\r\n   attribute vec3 ${color};\r\n\r\n   uniform mat4 ${projection};\r\n   uniform mat4 ${camera};\r\n\r\n   varying vec3 v_color;\r\n   \r\n   void main()\r\n   {\r\n      float c = cos(${angle});\r\n      float s = sin(${angle});\r\n\r\n      // I tried useing matrix transformations but it didnt work\r\n      vec3 p = ${position};\r\n\r\n      // Translate to origin\r\n      p.x -= ${origin}.x;\r\n      p.y -= ${origin}.y;\r\n\r\n      // Rotate\r\n      float xnew = p.x * c - p.y * s;\r\n      float ynew = p.x * s + p.y * c;\r\n\r\n      // Tranlate back\r\n      p.x = xnew + ${origin}.x;\r\n      p.y = ynew + ${origin}.y;\r\n\r\n      p -= vec3(${offset} , 0);\r\n      \r\n      gl_Position = (${projection} * ${camera}) * vec4(p , 1);\r\n      v_color = ${color};\r\n   }\r\n` as const;\r\n\r\nexport const fragmentShader = `\r\n   precision mediump float;\r\n\r\n   varying vec3 v_color;\r\n\r\n   void main()\r\n   {\r\n      gl_FragColor = vec4(v_color, 1);\r\n   }\r\n` as const;","export const attributeList = ['a_position', 'a_offset', 'a_origin', 'a_angle', 'a_texIndex', 'a_texCoord'] as const;\r\nexport const uniformList = ['u_projection', 'u_textures', 'u_camera'] as const;\r\n\r\nconst position = attributeList[0];\r\nconst offset = attributeList[1];\r\nconst origin = attributeList[2];\r\nconst angle = attributeList[3];\r\nconst textureIndex = attributeList[4];\r\nconst textureCoord = attributeList[5];\r\n\r\nconst projection = uniformList[0];\r\nconst textures = uniformList[1];\r\nconst camera = uniformList[2];\r\n\r\nexport type attributes = typeof attributeList[number];\r\nexport type uniforms = typeof uniformList[number];\r\n\r\nexport const vertexShader = `\r\n   precision mediump float;\r\n\r\n   attribute vec3 ${position};\r\n   attribute vec2 ${offset};\r\n   attribute vec2 ${origin};\r\n   attribute float ${angle};\r\n   attribute vec2 ${textureCoord};\r\n   attribute float ${textureIndex};      // TODO: change to int maybe...?\r\n\r\n   uniform mat4 ${projection};\r\n   uniform mat4 ${camera};\r\n\r\n   varying vec2 v_texCoord;\r\n   varying float v_texIndex;\r\n\r\n   void main()\r\n   {\r\n      float c = cos(${angle});\r\n      float s = sin(${angle});\r\n\r\n      // I tried useing matrix transformations but it didnt work\r\n      vec3 p = ${position};\r\n\r\n      // Translate to origin\r\n      p.x -= ${origin}.x;\r\n      p.y -= ${origin}.y;\r\n\r\n      // Rotate\r\n      float xnew = p.x * c - p.y * s;\r\n      float ynew = p.x * s + p.y * c;\r\n\r\n      // Tranlate back\r\n      p.x = xnew + ${origin}.x;\r\n      p.y = ynew + ${origin}.y;\r\n\r\n      p -= vec3(${offset} , 0);\r\n\r\n      gl_Position = (${projection} * ${camera}) * vec4(p, 1);\r\n      v_texCoord = ${textureCoord};\r\n      v_texIndex = ${textureIndex};\r\n   }\r\n` as const;\r\n\r\nexport const fragmentShader = `\r\n   precision mediump float;\r\n   \r\n   uniform sampler2D ${textures}[4];\r\n\r\n   varying vec2 v_texCoord;\r\n   varying float v_texIndex;\r\n\r\n   vec4 getTexture(sampler2D textures[4], int index, vec2 texCoord) {\r\n\r\n      vec4 color = vec4(0);\r\n      \r\n      // TODO: binary search\r\n\r\n      for (int i = 0; i < 4; ++i) {\r\n        vec4 sampler = texture2D(u_textures[i], texCoord);\r\n        if (i == index) {\r\n          color += sampler;\r\n        }\r\n      }\r\n\r\n      return color;\r\n  }\r\n\r\n   void main()\r\n   {\r\n      int index = int(v_texIndex);\r\n      gl_FragColor = getTexture(${textures}, index, v_texCoord);\r\n   }\r\n` as const;","import { createTexture, loadImage } from \"../Util/webgl\";\r\nimport { mapValue } from \"../Util/math\";\r\n\r\n/**\r\n * @description both the texture object intances and texture manager in one :) im dumb\r\n * TODO:\r\n *    - Add mechanisim to avoid texture duplication in case of user error.\r\n */\r\nexport default class Texture {\r\n\r\n   private static readonly MAX_TEXTURE_UNITS: number = 16;\r\n   private static gl: WebGLRenderingContext;\r\n   private static nextUnit: number = 0;\r\n   private static paths: string[] = [];\r\n\r\n   public unit: number;\r\n   public img: HTMLImageElement;\r\n   public glTexture: WebGLTexture;\r\n   public frameData: frame[];\r\n\r\n   public static init = (gl: WebGLRenderingContext) => {\r\n      if (Texture.gl) throw new Error('already initiated texture class');\r\n      Texture.gl = gl;\r\n   }\r\n   \r\n   constructor(img: HTMLImageElement, config?: frameDataConfig) {\r\n      if (Texture.nextUnit > Texture.MAX_TEXTURE_UNITS) throw new Error('no more texture units :(');\r\n      if (!Texture.gl) throw new Error('call Texture.init method first');\r\n      if (Texture.paths.includes(img.src)) console.warn('texture already exists, you\\'re duplicating');\r\n\r\n      this.img       = img;\r\n      this.unit      = Texture.nextUnit;\r\n      this.glTexture = createTexture(Texture.gl, img, this.unit);\r\n      this.frameData = (config) ? Texture.createFrameData(\r\n         config.height,\r\n         config.width,\r\n         config.cols,\r\n         config.rows\r\n      ) : [[0, 0, 1, 1]];\r\n\r\n      Texture.paths.push(img.src);\r\n      Texture.nextUnit++;\r\n   }\r\n\r\n   /* <------------------------------------| UTLITY METHODS |------------------------------------> */\r\n   /**\r\n    * @param height sheet height\r\n    * @param width sheet width\r\n    * @param cols number of columns\r\n    * @param rows number of rows\r\n    */\r\n   public static createFrameData = (\r\n      height: number,\r\n      width: number,\r\n      cols: number,\r\n      rows: number,\r\n   ): frame[] => {\r\n      let frameData: frame[] = [];\r\n\r\n      let [ spriteHeight, spriteWidth ] = [\r\n         height / rows,\r\n         width / cols\r\n      ];\r\n\r\n      let heightRange   = { min: 0, max: height };\r\n      let widthRange    = { min: 0, max: width };\r\n      let normalRange   = { min: 0, max: 1 };\r\n\r\n      for (let row = 0; row < rows; row++) {\r\n         for (let col = 0; col < cols; col++) {\r\n            frameData.push([\r\n               mapValue(col * spriteWidth, widthRange, normalRange),                   // x1\r\n               mapValue(row * spriteHeight, heightRange, normalRange),                 // y1\r\n               mapValue(col * spriteWidth + spriteWidth, widthRange, normalRange),     // x2\r\n               mapValue(row * spriteHeight + spriteHeight, heightRange, normalRange)   // y2\r\n            ])\r\n         }\r\n      }\r\n\r\n      return frameData;\r\n   };\r\n\r\n   /* <------------------------------------| FACTORY METHODS |------------------------------------> */\r\n\r\n   public static fromPath = async (path: string, config?: frameDataConfig): Promise<Texture> => {\r\n      let img = await loadImage(path);\r\n      return new Texture(img, config);\r\n   }\r\n}","/* Core */\r\nexport { default as Surface } from './Core/Surface';\r\nexport { default as Texture } from './Renderer/Texture';\r\n\r\n/* Math */\r\nexport { default as Vec2 } from './Util/Classes/Math/Vector/Vec2';\r\nexport { rand, randInt, rangeOverlaps, mapValue } from './Util/math';\r\n\r\n/* Entities */\r\nexport { default as Rectangle } from './Entities/Rectangle';\r\nexport { default as Sprite } from './Entities/Sprite';","/**\r\n * TODO: abstract all into Mat abstract parent class for all Matrix classes\r\n */\r\n\r\nexport default class Mat4 extends Array<number> {\r\n\r\n   public static readonly SIZE = 16;\r\n\r\n   constructor(\r\n      values?: number[]\r\n   ) {\r\n      values = (values) ? values : new Array<number>(Mat4.SIZE);\r\n      if (values.length < Mat4.SIZE) values.concat(new Array<number>(Mat4.SIZE - values.length).fill(0));\r\n      if (values.length > Mat4.SIZE) throw new Error(`Mat4 can't have more than 16 values`);\r\n      super(...values);\r\n   };\r\n\r\n   public static Identity(): Mat4 {\r\n      return new Mat4([\r\n         1, 0, 0, 0,\r\n         0, 1, 0, 0,\r\n         0, 0, 1, 0,\r\n         0, 0, 0, 1\r\n      ]);\r\n   }\r\n}","export default class Vec2 {\r\n   constructor(\r\n      public x: number,\r\n      public y: number\r\n   ) {}\r\n\r\n   public add(v: Vec2) {\r\n      this.x = v.x;\r\n      this.y = v.y;\r\n   }\r\n}","export default class Vec3 {\r\n   constructor(\r\n      public x: number = 0,\r\n      public y: number = 0,\r\n      public z: number = 0,\r\n   ) {}\r\n}","import { inRange, mapValue } from \"../math\";\r\nimport Vec3 from \"./Math/Vector/Vec3\";\r\n\r\nexport default class RGB extends Vec3 {\r\n\r\n   constructor(\r\n      r: number,\r\n      g: number,\r\n      b: number\r\n   ) {\r\n      \r\n      if (!inRange(r, 0, 255)) { console.warn(`Invalid r value, must be within 0 to 255`); r = 0 }\r\n      if (!inRange(g, 0, 255)) { console.warn(`Invalid g value, must be within 0 to 255`); g = 0 }\r\n      if (!inRange(b, 0, 255)) { console.warn(`Invalid b value, must be within 0 to 255`); b = 0 }\r\n\r\n      super(r, g, b);\r\n   }\r\n\r\n   set r(n: number) {\r\n      if (!inRange(n, 0, 255)) {\r\n         console.warn(`Invalid r value, must be within 0 to 255`);\r\n         return;\r\n      }\r\n      this.x = n;\r\n   }\r\n\r\n   set g(n: number) {\r\n      if (!inRange(n, 0, 255)) {\r\n         console.warn(`Invalid g value, must be within 0 to 255`);\r\n         return;\r\n      }\r\n      this.y = n;\r\n   }\r\n\r\n   set b(n: number) {\r\n      if (!inRange(n, 0, 255)) {\r\n         console.warn(`Invalid b value, must be within 0 to 255`);\r\n         return;\r\n      }\r\n      this.z = n;\r\n   }\r\n\r\n   get r() { return this.x }\r\n   get g() { return this.y }\r\n   get b() { return this.z }\r\n\r\n   public getNormalized(): [r: number, g: number, b: number] {\r\n      return [\r\n         mapValue(this.r, { min: 0, max: 255 }, { min: 0, max: 1 }),\r\n         mapValue(this.g, { min: 0, max: 255 }, { min: 0, max: 1 }),\r\n         mapValue(this.b, { min: 0, max: 255 }, { min: 0, max: 1 })\r\n      ]\r\n   }\r\n\r\n   // Factory methods\r\n   public static fromArr(rgb: [r: number, g: number, b: number]) {\r\n      return new RGB(rgb[0], rgb[1], rgb[2]);\r\n   }\r\n\r\n   public static fromNum(r: number, g: number, b: number) {\r\n      return new RGB(r, g, b);\r\n   }\r\n}","export default class Point {\r\n   constructor(\r\n      public x: number = 0,\r\n      public y: number = 0\r\n   ) {}\r\n\r\n   public getCenter(): [x: number, y: number] {\r\n      return [this.x/2, this.y/2];\r\n   }\r\n\r\n   public getValues(): [x: number, y: number] {\r\n      return [this.x, this.y];\r\n   }\r\n}","export default class Size {\r\n   constructor(\r\n      public width: number = 0,\r\n      public height: number = 0\r\n   ) {}\r\n\r\n   public scale(n: number): Size {\r\n      this.width *= n;\r\n      this.height *= n;\r\n      return this;\r\n   }\r\n\r\n   public getCenter(): [x: number, y: number] {\r\n      return [this.width / 2, this.height / 2]\r\n   }\r\n\r\n   public getValues(): [width: number, height: number] {\r\n      return [this.width, this.height];\r\n   }\r\n}","import Point from \"./Point\";\r\nimport Size from \"./Size\";\r\n\r\n/**\r\n * TODO:\r\n *    * add all purpose methods to manipulate members (e.g. move(), scale(), moveTo(), etc )\r\n *    * Add scale member that properly scales position member during rendering phase\r\n *    * IDK if i should do offset & rotation transformation here or in shader...?\r\n */\r\nexport default class Transform {\r\n\r\n   /**\r\n    * @description pre-computed offset used by renderer\r\n    */\r\n   private _offset: Point = new Point();\r\n\r\n   /**\r\n    * @description pre-computed origin used by renderer\r\n    */\r\n   private _origin: Point = new Point();\r\n\r\n   constructor(\r\n      private _position: Point = new Point(),\r\n      private _size: Size = new Size(),\r\n      private _anchor: Point = new Point(),\r\n      private _rotation: number = 0\r\n   ) {\r\n      this.updateOffset();\r\n      this.updateOrigin();\r\n   }\r\n\r\n   get offset() { return this._offset };\r\n   get origin() { return this._origin };\r\n\r\n   get position() { return this._position };\r\n   get size() {return this._size };\r\n\r\n   get rotation() { return this._rotation };\r\n   set rotation(n: number) {\r\n      this._rotation = n \r\n   }\r\n   \r\n   get x() { return this._position.x }\r\n   set x(n: number) {\r\n      this._position.x = n;\r\n      this.updateOriginX();\r\n   }\r\n   \r\n   get y() { return this._position.y }\r\n   set y(n: number) {\r\n      this._position.y = n;\r\n      this.updateOriginY();\r\n   }\r\n\r\n   get width() { return this._size.width }\r\n   set width(n: number) {\r\n      this._size.width = n;\r\n      this.updateOffsetX();\r\n      this.updateOriginX();\r\n   }\r\n\r\n   get height() { return this._size.height }\r\n   set height(n: number) {\r\n      this._size.height = n;\r\n      this.updateOffsetY();\r\n      this.updateOriginY();\r\n   }\r\n\r\n   set anchorX(n: number) {\r\n      this._anchor.x = n;\r\n      this.updateOffsetX();\r\n      this.updateOriginX();\r\n   }\r\n\r\n   set anchorY(n: number) {\r\n      this._anchor.y = n;\r\n      this.updateOffsetY();\r\n      this.updateOriginY();\r\n   }\r\n\r\n   // HANDELING PRE-COMPUTED VALUES. NOTE: Origin is relative to offset, so offset must be calculated before origin\r\n   private updateOffset() {\r\n      this.updateOffsetX();\r\n      this.updateOffsetY();\r\n   }\r\n\r\n   private updateOffsetX() {\r\n      this._offset.x = this._size.width * this._anchor.x;\r\n   }\r\n\r\n   private updateOffsetY() {\r\n      this._offset.y = this._size.height * this._anchor.y\r\n   }\r\n\r\n   private updateOrigin() {\r\n      this.updateOriginX();\r\n      this.updateOriginY();\r\n   }\r\n\r\n   private updateOriginX() {\r\n      this._origin.x = this._position.x + this._offset.x;\r\n   }\r\n\r\n   private updateOriginY() {\r\n      this._origin.y = this._position.y + this._offset.y;\r\n   }\r\n   \r\n}","export const emptyFunc = () => {};\r\n\r\nexport const emptyRecord = <\r\n   P extends string | number | symbol = string,\r\n   Q = string\r\n>(): Record<P, Q> => <Record<P, Q>>{};","export const isPowerOf2 = (num: number) => {\r\n   return (num & (num - 1)) == 0;\r\n};\r\n\r\nexport const rand = (min: number, max: number) => Math.random() * (max - min) + min;\r\nexport const randInt = (min: number, max: number) => Math.round(rand(min, max));\r\n\r\n/**\r\n * @description linearly maps value from range to another range\r\n * @copyright https://rosettacode.org/wiki/Map_range\r\n * @param value value to be mapped from 'fRange' to 'tRange'\r\n * @param fRange from range\r\n * @param tRange to range\r\n * @returns mapped value\r\n */\r\nexport const mapValue = (\r\n   value: number,\r\n   fRange: { min: number; max: number },\r\n   tRange: { min: number; max: number }\r\n): number =>  (tRange.min) + ( (value - fRange.min) * (tRange.max - tRange.min) / (fRange.max - fRange.min) );\r\n\r\nexport const inRange = (\r\n   value: number,\r\n   min: number,\r\n   max: number,\r\n   exclusive?: boolean\r\n) => {\r\n   if (exclusive) {\r\n      return value < max && value > min;\r\n   } else {\r\n      return value <= max && value >= min;\r\n   }\r\n}\r\n\r\nexport const rangeOverlaps = (\r\n   r1: { min: number, max: number },\r\n   r2: { min: number, max: number }\r\n) => (r1.min <= r2.max && r1.max >= r2.min);","export const createContext = (canvas: HTMLCanvasElement): WebGLRenderingContext => {\r\n   let gl = canvas.getContext('webgl');\r\n   if (!gl) console.error(`couldn't get webgl context`);\r\n   return <WebGLRenderingContext>gl;\r\n}\r\n\r\n/**\r\n * @param gl webgl rendering context\r\n * @param type vertex or fragment?\r\n * @param source GLSL script\r\n */\r\n export const createShader = (\r\n   gl: WebGLRenderingContext,\r\n   type: 'vertex' | 'fragment',\r\n   source: string\r\n): WebGLShader => {\r\n   let shaderType = type == 'vertex' ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER;\r\n   let shader = <WebGLShader>gl.createShader(shaderType);\r\n\r\n   gl.shaderSource(shader, source);\r\n   gl.compileShader(shader);\r\n\r\n   if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n      console.error(`Error compiling shader`, gl.getShaderInfoLog(shader));\r\n      gl.deleteShader(shader);\r\n   }\r\n\r\n   return shader;\r\n};\r\n\r\n\r\nexport const createProgram = (\r\n   gl: WebGLRenderingContext,\r\n   vertextShader: WebGLShader | 'vertex',\r\n   fragmentShader: WebGLShader | 'fragment'\r\n   ): WebGLProgram => {\r\n\r\n   let program = <WebGLProgram>gl.createProgram();\r\n\r\n   vertextShader =\r\n      typeof vertextShader == 'string'\r\n         ? createShader(gl, 'vertex', vertextShader)\r\n         : vertextShader;\r\n   \r\n   fragmentShader = \r\n      typeof fragmentShader == 'string'\r\n         ? createShader(gl, 'fragment', fragmentShader)\r\n         : fragmentShader;\r\n\r\n\r\n   gl.attachShader(program, vertextShader);\r\n   gl.attachShader(program, fragmentShader);\r\n\r\n   gl.linkProgram(program);\r\n   gl.validateProgram(program);  // not really sure what this does...\r\n\r\n   if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n      console.error(\r\n         `Error compiling program `,\r\n         gl.getProgramInfoLog(program)\r\n      );\r\n      gl.deleteProgram(program);\r\n   }\r\n\r\n   return program;\r\n}\r\n\r\nexport const createCanvas = (width: number, height: number) => {\r\n   let canvas = document.createElement('canvas');\r\n   canvas.width = width;\r\n   canvas.height = height;\r\n   document.body.append(canvas);\r\n   return canvas;\r\n}\r\n\r\n/**\r\n * @param gl WebGLRenderingContext\r\n * @param source HTMLImageElement\r\n * @returns WebGLTexture\r\n */\r\nexport const createTexture = (gl: WebGLRenderingContext, source: HTMLImageElement, unit?: number): WebGLTexture => {\r\n   let texture = <WebGLTexture>gl.createTexture();\r\n   unit = (unit) ? unit : 0;\r\n\r\n   gl.activeTexture(gl.TEXTURE0 + unit);\r\n   gl.bindTexture(gl.TEXTURE_2D, texture);\r\n   gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n   \r\n   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n   gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n   // gl.generateMipmap(gl.TEXTURE_2D);\r\n\r\n   return texture;\r\n}\r\n\r\n/**\r\n * \r\n * @copyright https://wikimedia.org/api/rest_v1/media/math/render/svg/1d2af32ec0b29f7819e989e82c91dcee431a9921\r\n */\r\nexport const createOrthoMatrix = (\r\n   right: number,\r\n   bottom: number,\r\n   left: number   = 0,\r\n   top: number    = 0,\r\n   far: number    = 1000,\r\n   near: number   = -1000\r\n) => {\r\n   let mat = new Array<number>(4 * 4).fill(0);\r\n\r\n   mat[0]   = 2 / (right - left);\r\n   mat[5]   = 2 / (top - bottom),\r\n   mat[10]  = -2 / (far - near);\r\n   mat[12]  = -(right + left) / (right - left);\r\n   mat[13]  = -(top + bottom) / (top - bottom);\r\n   mat[14]  = -(far + near)/(far - near);\r\n   mat[15]  = 1;\r\n\r\n   return mat;\r\n}\r\n\r\n/**\r\n * @copyright https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations\r\n */\r\nexport const createTranslationMatrix = (x: number, y: number) => [\r\n   1,    0,    0,    0,\r\n   0,    1,    0,    0,\r\n   0,    0,    1,    0,\r\n   x,    y,    0,    1\r\n];\r\n\r\n\r\n/**\r\n * @note a more pragmatic way of setting these values must exist.\r\n * @param type \r\n * @returns \r\n */\r\nexport const getDataFromType = (\r\n   type: number,\r\n): [unitType: number, units: number, totalSize: number] => {\r\n   let unitType: number;\r\n   let units: number;\r\n   let unitSize: number;\r\n   let totalSize: number;\r\n   let gl = WebGLRenderingContext;\r\n\r\n   // TODO: move this elsewhere to use global consts\r\n   let FLOAT_SIZE = 4;\r\n\r\n   switch (type) {\r\n      case gl.FLOAT:\r\n         unitType    = gl.FLOAT;\r\n         units       = 1;\r\n         unitSize    = FLOAT_SIZE;\r\n         break;\r\n      \r\n      case gl.FLOAT_VEC2:\r\n         unitType    = gl.FLOAT;\r\n         units       = 2;\r\n         unitSize    = FLOAT_SIZE;\r\n         break;\r\n\r\n      case gl.FLOAT_VEC3:\r\n         unitType    = gl.FLOAT;\r\n         units       = 3;\r\n         unitSize    = FLOAT_SIZE;\r\n         break;\r\n   \r\n      default:\r\n         unitType    = -1;\r\n         units       = -1;\r\n         unitSize    = -.5;\r\n\r\n         console.warn(`${type} is not a valid WebGL type`)\r\n         break;\r\n   }\r\n\r\n   totalSize = units * unitSize;\r\n\r\n   return [unitType, units, totalSize];\r\n};\r\n\r\n/**\r\n * @param elems amount of elements that fit in iao\r\n * @returns iao\r\n */\r\nexport const createQuadIAO = (elems: number): number[] => {\r\n   let arr: number[] = [];\r\n   let step: number;\r\n   let offset: number;\r\n\r\n   // TODO: move this elsewhere to use global consts\r\n   let VERTEX_PER_QUAD = 4;\r\n   let INDICES_PER_QUAD = 6;\r\n\r\n   for (let i = 0; i < elems; i++) {\r\n      offset   = VERTEX_PER_QUAD * i;\r\n      step     = INDICES_PER_QUAD * i;\r\n\r\n      arr[step + 0] = offset + 0;   // v1\r\n      arr[step + 1] = offset + 1;   // v2\r\n      arr[step + 2] = offset + 2;   // v3\r\n      arr[step + 3] = offset + 2;   // v3\r\n      arr[step + 4] = offset + 1;   // v1\r\n      arr[step + 5] = offset + 3;   // v4\r\n   };\r\n\r\n   return arr;\r\n}\r\n\r\nexport const loadImage = async (path: string) => {\r\n   let img = new Image();\r\n   img.src = path;\r\n   await img.decode();\r\n   return img;\r\n};","import { Surface } from './UGF';\r\n\r\nlet main = async () => {\r\n\r\n   let s = new Surface(1200, 800);\r\n\r\n   // TODO: add example things :)\r\n\r\n}\r\n\r\nmain();","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main.ts\");\n",""],"names":[],"sourceRoot":""}